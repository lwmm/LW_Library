<?php
require_once dirname(__FILE__) . '/../../Validation/Validation.php';
#require_once dirname(__FILE__) . '/../../Filesystem/Io.php';

/**
 * Test class for lw_validation.
 * Generated by PHPUnit on 2013-02-26 at 13:00:34.
 */
class ValidationTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @todo Implement testHasMaxlength().
     */
    public function testHasMaxlength()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::hasMaxlength("test", array("value" => 5)));
        $this->assertFalse(LwLibrary\Validation\Validation::hasMaxlength("test123", array("value" => 5)));
    }

    /**
     * @todo Implement testHasMinlength().
     */
    public function testHasMinlength()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::hasMinlength("test", array("value" => 4)));
        $this->assertFalse(LwLibrary\Validation\Validation::hasMinlength("test", array("value" => 5)));
    }

    /**
     * @todo Implement testIsRequired().
     */
    public function testIsRequired()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::isRequired("test"));
        $this->assertFalse(LwLibrary\Validation\Validation::isRequired(""));
    }

    /**
     * @todo Implement testIsEmail().
     */
    public function testIsEmail()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::isEmail(""));
        $this->assertTrue(LwLibrary\Validation\Validation::isEmail("test@logic-works.de"));
        $this->assertFalse(LwLibrary\Validation\Validation::isEmail("test@logic-worksde"));
    }

    /**
     * @todo Implement testIsDate().
     */
    public function testIsDate()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::isDate("27.02.2013","de"));
        $this->assertTrue(LwLibrary\Validation\Validation::isDate("29.02.2012","de"));
        $this->assertFalse(LwLibrary\Validation\Validation::isDate("29.02.2011","de"));
        $this->assertFalse(LwLibrary\Validation\Validation::isDate("29.02.2011","en"));
        $this->assertFalse(LwLibrary\Validation\Validation::isDate("02.29.2011","en"));
        $this->assertTrue(LwLibrary\Validation\Validation::isDate("02.27.2013","en"));
    }

    /**
     * @todo Implement testMinDate().
     */
    public function testMinDate()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::minDate("26.02.2013", "25.02.2013"));
        $this->assertFalse(LwLibrary\Validation\Validation::minDate("26.02.2013", "27.02.2013"));
        $this->assertFalse(LwLibrary\Validation\Validation::minDate("", "27.02.2013"));
        $this->assertFalse(LwLibrary\Validation\Validation::minDate("26.02.2013", ""));
        $this->assertFalse(LwLibrary\Validation\Validation::minDate("02.26.2013", "02.27.2013"));
    }

    /**
     * @todo Implement testMaxDate().
     */
    public function testMaxDate()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::maxDate("26.02.2013", "26.02.2013"));
        $this->assertTrue(LwLibrary\Validation\Validation::maxDate("25.02.2013", "26.02.2013"));
        $this->assertFalse(LwLibrary\Validation\Validation::maxDate("27.02.2013", "26.02.2013"));
        $this->assertFalse(LwLibrary\Validation\Validation::maxDate("", "26.02.2013"));
        $this->assertFalse(LwLibrary\Validation\Validation::maxDate("27.02.2013", ""));
        $this->assertFalse(LwLibrary\Validation\Validation::maxDate("27.02.2013", "02.28.2013"));
    }

    /**
     * @todo Implement testCheckFileExtensions().
     */
    public function testCheckFileExtensions()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::checkFileExtensions("test.txt", "txt;png;jpg;exe"));
        $this->assertTrue(LwLibrary\Validation\Validation::checkFileExtensions("test.png", "txt;png;jpg;exe"));
        $this->assertFalse(LwLibrary\Validation\Validation::checkFileExtensions("test", "txt;png;jpg;exe"));
        $this->assertTrue(LwLibrary\Validation\Validation::checkFileExtensions("", "txt;png;jpg;exe"));
    }

    /**
     * @todo Implement testIsAlnum().
     */
    public function testIsAlnum()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::isAlnum("afuefaie 78937 faenieha"));
        $this->assertTrue(LwLibrary\Validation\Validation::isAlnum("afuefaie faenieha"));
        $this->assertTrue(LwLibrary\Validation\Validation::isAlnum("904853047803"));
        $this->assertFalse(LwLibrary\Validation\Validation::isAlnum("9048 /%$? fbguf"));
    }

    /**
     * @todo Implement testIsBetween().
     */
    public function testIsBetween()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::isBetween(2, array("value1" => 1, "value2" => 3)));
        $this->assertTrue(LwLibrary\Validation\Validation::isBetween(1, array("value1" => 1, "value2" => 3)));
        $this->assertTrue(LwLibrary\Validation\Validation::isBetween(3, array("value1" => 1, "value2" => 3)));
        $this->assertTrue(LwLibrary\Validation\Validation::isBetween(3, array("value1" => 1, "value2" => 4)));
        $this->assertFalse(LwLibrary\Validation\Validation::isBetween(6, array("value1" => 1, "value2" => 4)));
    }

    /**
     * @todo Implement testIsDigits().
     */
    public function testIsDigits()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::isDigits("724037434"));
        $this->assertTrue(LwLibrary\Validation\Validation::isDigits(1312));
        $this->assertFalse(LwLibrary\Validation\Validation::isDigits("agdi12 13"));
    }

    /**
     * @todo Implement testIsGreaterThan().
     */
    public function testIsGreaterThan()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::isGreaterThan("2", array("value" => 1)));
        $this->assertTrue(LwLibrary\Validation\Validation::isGreaterThan("2", array("value" => "a")));
        $this->assertFalse(LwLibrary\Validation\Validation::isGreaterThan("A", array("value" => "1")));
        $this->assertFalse(LwLibrary\Validation\Validation::isGreaterThan("Bb", array("value" => "Aa")));
        $this->assertFalse(LwLibrary\Validation\Validation::isGreaterThan("4", array("value" => "9")));
    }

    /**
     * @todo Implement testIsLessThan().
     */
    public function testIsLessThan()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::isLessThan("a", array("value" => 6)));
        $this->assertTrue(LwLibrary\Validation\Validation::isLessThan(5, array("value" => 6)));
        $this->assertFalse(LwLibrary\Validation\Validation::isLessThan(8, array("value" => 6)));
        $this->assertFalse(LwLibrary\Validation\Validation::isLessThan(8, array("value" => "a")));
    }

    /**
     * @todo Implement testIsInt().
     */
    public function testIsInt()
    {
        $this->assertTrue(LwLibrary\Validation\Validation::isInt(1));
        $this->assertTrue(LwLibrary\Validation\Validation::isInt(1347236478));
        $this->assertFalse(LwLibrary\Validation\Validation::isInt("1"));
    }

    /**
     * @todo Implement testIsRegex().
     */
    public function testIsRegex()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsFiletype().
     */
    public function testIsFiletype()
    {
        $IoMock = $this->getMock("\\LwLibrary\\Filesystem\\Io", array("getFileExtension"));
        $IoMock->Expects($this->any())
                ->method("getFileExtension")
                ->will($this->returnValue("png"));

        $factoryMock = $this->getMock("\\LwLibrary\\Filesystem\\IoFactory", array("createObject"));

        $factoryMock->expects($this->any())
                ->method("createObject")
                ->will($this->returnValue($IoMock));

        $validation = new \LwLibrary\Validation\Validation();
        $validation->setIoFactory($factoryMock);

        $this->assertFalse($validation->isFiletype("test.txt", array("value" => ":txt:")));
        $this->assertTrue($validation->isFiletype("test.png", array("value" => ":txt:png:")));
    }

    /**
     * @todo Implement testIsImage().
     */
    public function testIsImage()
    {
        $IoMock = $this->getMock("\\LwLibrary\\Filesystem\\Io", array("getFileExtension"));
        $IoMock->Expects($this->any())
                ->method("getFileExtension")
                ->will($this->returnValue("png"));

        $factoryMock = $this->getMock("\\LwLibrary\\Filesystem\\IoFactory", array("createObject"));

        $factoryMock->expects($this->any())
                ->method("createObject")
                ->will($this->returnValue($IoMock));

        $validation = new \LwLibrary\Validation\Validation();
        
        $validation->setIoFactory($factoryMock);
        $this->assertTrue($validation->isImage("text.png"));
        
        
        
        $IoMock = $this->getMock("\\LwLibrary\\Filesystem\\Io", array("getFileExtension"));
        $IoMock->Expects($this->any())
                ->method("getFileExtension")
                ->will($this->returnValue("txt"));

        $factoryMock = $this->getMock("\\LwLibrary\\Filesystem\\IoFactory", array("createObject"));

        $factoryMock->expects($this->any())
                ->method("createObject")
                ->will($this->returnValue($IoMock));
        
        $validation->setIoFactory($factoryMock);
        $this->assertFalse($validation->isImage("text.txt"));
    }

    /**
     * @todo Implement testIsCustom().
     */
    public function testIsCustom()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
}