<?php

require_once dirname(__FILE__) . '/../Config/phpUnitConfig.php';
require_once dirname(__FILE__) . '/../../Filesystem/Directory.php';
require_once dirname(__FILE__) . '/../../Filesystem/Io.php';

/**
 * Test class for Io.
 * Generated by PHPUnit on 2013-02-25 at 15:06:34.
 */
class IoTest extends \PHPUnit_Framework_TestCase
{

    private $Io;
    private $directoryObject_base;
    private $directoryObject2;
    private $config;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->Io = new LwLibrary\Filesystem\Io();

        $this->config = phpUnitConfig::getConfig();

        $this->directoryObject_base = LwLibrary\Filesystem\Directory::getInstance($this->config["path"]["web_resource"]);
        $this->assertTrue(is_object($this->directoryObject_base));
        $this->assertTrue($this->directoryObject_base->check());

        $this->directoryObject2 = LwLibrary\Filesystem\Directory::getInstance($this->config["path"]["web_resource"] . "test_lw_io/");
        if (!$this->directoryObject2->check()) {
            $this->assertTrue($this->directoryObject_base->add("test_lw_io"));
            $this->addfile($this->directoryObject2->getPath(), "test.txt");
        } else {
            $dir_test = LwLibrary\Filesystem\Directory::getInstance($this->directoryObject2->getPath()."test/");
            $dir_test2 = LwLibrary\Filesystem\Directory::getInstance($this->directoryObject2->getPath()."test/test2/");
            $dir_test3 = LwLibrary\Filesystem\Directory::getInstance($this->directoryObject2->getPath()."test/test2/test3/");

            if($dir_test3->check())$dir_test3->delete();
            if($dir_test2->check())$dir_test2->delete();
            if($dir_test->check())$dir_test->delete();
            
            
            $this->directoryObject2->delete(true);
            $this->setUp();
        }
        
        
        $this->assertTrue(is_object($this->directoryObject2));
        $this->assertTrue($this->directoryObject2->check());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->assertTrue($this->directoryObject2->delete(true));
        $this->assertFalse($this->directoryObject2->check());
    }

    /**
     * @todo Implement testMkdir_recursive().
     */
    public function testMkdir_recursive()
    {
        $this->assertTrue($this->Io->mkdir_recursive($this->directoryObject2->getPath()."test/test2/test3/", true));
        $dir_test = LwLibrary\Filesystem\Directory::getInstance($this->directoryObject2->getPath()."test/");
        $dir_test2 = LwLibrary\Filesystem\Directory::getInstance($this->directoryObject2->getPath()."test/test2/");
        $dir_test3 = LwLibrary\Filesystem\Directory::getInstance($this->directoryObject2->getPath()."test/test2/test3/");
        
        if($dir_test3->check())$dir_test3->delete();
        if($dir_test2->check())$dir_test2->delete();
        if($dir_test->check())$dir_test->delete();
    }

    /**
     * @todo Implement testScandir().
     */
    public function testScandir()
    {
        $assertedArray = array(".", "..", "test.txt");
        $this->assertEquals($assertedArray, $this->Io->scandir($this->directoryObject2->getPath()));

        $assertedArray = array("test.txt", "..", ".");
        $this->assertEquals($assertedArray, $this->Io->scandir($this->directoryObject2->getPath(), 1));
    }

    /**
     * @todo Implement testLoadFile().
     */
    public function testLoadFile()
    {
        $this->assertEquals("test text ohne viel sinn!", $this->Io->loadFile($this->directoryObject2->getPath() . "test.txt"));

        try {
            $this->Io->loadFile($this->directoryObject2->getPath() . "test2.txt");
        } catch (Exception $e) {
            $this->assertEquals("Das File (" . $this->directoryObject2->getPath() . "test2.txt) existiert nicht !", $e->getMessage());
        }
    }

    /**
     * @todo Implement testLoadCSV().
     */
    public function testLoadCSV()
    {
        $this->addcsv($this->directoryObject2->getPath(), "test.csv");
        $assertedArray = array(array("hallo", "hi"), array("abc", "def"), array("lw", "works"));
        $this->assertEquals($assertedArray, $this->Io->loadCSV($this->directoryObject2->getPath() . "test.csv"));
        $this->assertFalse($this->Io->loadCSV($this->directoryObject2->getPath() . "test1231.csv"));
    }

    /**
     * @todo Implement testWriteFile().
     */
    public function testWriteFile()
    {
        $this->Io->writeFile($this->directoryObject2->getPath() . "test.txt", "neuer unsinn im file!");
        $this->assertEquals("neuer unsinn im file!", $this->Io->loadFile($this->directoryObject2->getPath() . "test.txt"));

        try {
            $this->Io->writeFile($this->directoryObject2->getPath() . "tes1232t.txt", "unsinnsstring");
        } catch (Exception $e) {
            $this->assertEquals("Das File konnte nicht geoeffnet werden !", $e->getMessage());
        }
    }

    /**
     * @todo Implement testAppendFile().
     */
    public function testAppendFile()
    {
        $this->assertEquals(12, $this->Io->appendFile($this->directoryObject2->getPath()."test.txt","abcdefghijkl"));
        $this->assertEquals("test text ohne viel sinn!abcdefghijkl", $this->Io->loadFile($this->directoryObject2->getPath()."test.txt"));
        
        try {
            $this->Io->appendFile($this->directoryObject2->getPath() . "tes1232t.txt", "unsinnsstring");
        } catch (Exception $e) {
            $this->assertEquals("Das File konnte nicht geoeffnet werden !", $e->getMessage());
        }
    }

    /**
     * @todo Implement testGetFileName().
     */
    public function testGetFileName()
    {
        $this->assertEquals("test", $this->Io->getFilename($this->directoryObject2->getPath()."test"));
        $this->assertEquals("test.txt", $this->Io->getFilename($this->directoryObject2->getPath()."test.txt"));
    }

    /**
     * @todo Implement testGetFileNameWithoutExternsion().
     */
    public function testGetFileNameWithoutExtension()
    {
        $this->assertEquals("test", $this->Io->getFileNameWithoutExtension($this->directoryObject2->getPath()."test.txt"));
        $this->assertEquals("", $this->Io->getFileNameWithoutExtension($this->directoryObject2->getPath()."test"));
    }

    /**
     * @todo Implement testGetPathByRemovingLastPathComponent().
     */
    public function testGetPathByRemovingLastPathComponent()
    {
        $this->assertEquals("",  $this->Io->getPathByRemovingLastPathComponent("hallo.txt"));
        $this->assertEquals($this->directoryObject2->getPath(), $this->Io->getPathByRemovingLastPathComponent($this->directoryObject2->getPath()."test.txt"));
    }

    /**
     * @todo Implement testGetPathByAddingStringToFilename().
     */
    public function testGetPathByAddingStringToFilename()
    {
        $this->assertEquals($this->directoryObject2->getPath()."testha_l_lo.txt",$this->Io->getPathByAddingStringToFilename($this->directoryObject2->getPath()."test.txt","ha.l/lo_"));
        $this->assertEquals($this->directoryObject2->getPath()."testtest.txt",$this->Io->getPathByAddingStringToFilename($this->directoryObject2->getPath()."test.txt","test"));
        $this->assertEquals($this->directoryObject2->getPath()."test.txt",$this->Io->getPathByAddingStringToFilename($this->directoryObject2->getPath()."test.txt",""));
    }

    /**
     * @todo Implement testGetFreeFilepath().
     */
    public function testGetFreeFilepath()
    {
        $this->assertEquals($this->directoryObject2->getPath()."test_2.txt", $this->Io->getFreeFilepath($this->directoryObject2->getPath()."test.txt"));
        $this->assertEquals($this->directoryObject2->getPath()."testtest.txt", $this->Io->getFreeFilepath($this->directoryObject2->getPath()."testtest.txt"));
    }

    /**
     * @todo Implement testHumanFileSize().
     */
    public function testHumanFileSize()
    {
        $this->assertEquals("25 Bytes", $this->Io->humanFileSize(25));
        $this->assertEquals("25.07 KB", $this->Io->humanFileSize(25674));
        $this->assertEquals("251.51 MB", $this->Io->humanFileSize(263725674));
    }

    /**
     * @todo Implement testSplitFilename().
     */
    public function testSplitFilename()
    {
        $assertedArray = array(
            "name" => "test",
            "suffix" => "",
            "ext" => "txt",
            "filename" => "test.txt"
        );
        $this->assertEquals($assertedArray, $this->Io->splitFilename("test.txt"));
        
        $assertedArray = array(
            "name" => "test",
            "suffix" => "_2",
            "ext" => "txt",
            "filename" => "test_2.txt"
        );
        $this->assertEquals($assertedArray, $this->Io->splitFilename("test_2.txt"));
    }

    /**
     * @todo Implement testGetFileExtension().
     */
    public function testGetFileExtension()
    {
        $this->assertEquals("txt", $this->Io->getFileExtension("test.txt"));
        $this->assertEquals("", $this->Io->getFileExtension("test"));
    }

    /**
     * @todo Implement testFile_perms().
     */
    public function testFile_perms()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetMimeType().
     */
    public function testGetMimeType()
    {
        $this->assertEquals("application/msword", $this->Io->getMimeType("doc"));
        $this->assertEquals("application/octet-stream", $this->Io->getMimeType("exe"));
        $this->assertEquals("application/octet-stream", $this->Io->getMimeType("dll"));
        $this->assertEquals("application/x-chess-pgn", $this->Io->getMimeType("pgn"));
        $this->assertEquals("application/x-wais-source", $this->Io->getMimeType("src"));
    }

    /**
     * @todo Implement testGetIconByExtension().
     */
    public function testGetIconByExtension()
    {
        $this->assertEquals('<img src="' . $this->directoryObject2->getPath() . 'pics/lw_fugue/document-excel-csv.png" border="0"/>', $this->Io->getIconByExtension("csv", $this->directoryObject2->getPath()));
        $this->assertEquals('<img src="' . $this->directoryObject2->getPath() . 'pics/lw_fugue/picture.png" border="0"/>', $this->Io->getIconByExtension("gif", $this->directoryObject2->getPath()));
        $this->assertEquals('<img src="' . $this->directoryObject2->getPath() . 'pics/lw_fugue/question-button.png" border="0"/>', $this->Io->getIconByExtension("hallo", $this->directoryObject2->getPath()));
    }

    public function addfile($path, $filename)
    {
        $string = "test text ohne viel sinn!";
        $fileopen = fopen($path . $filename, "w+");
        $ok = fwrite($fileopen, $string);
        fclose($fileopen);
        $this->assertEquals($ok, strlen($string));
    }

    public function addcsv($path, $filename)
    {
        $string =
                "hallo,hi\nabc,def\nlw,works";
        $fileopen = fopen($path . $filename, "w+");
        $ok = fwrite($fileopen, $string);
        fclose($fileopen);
        $this->assertEquals($ok, strlen($string));
    }

}