<?php

error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED);
require_once dirname(__FILE__) . '/../Config/phpUnitConfig.php';
require_once dirname(__FILE__) . '/../../Filesystem/File.php';
require_once dirname(__FILE__) . '/../../Filesystem/ImageFile.php';


/**
 * Test class for ImageFile.
 * Generated by PHPUnit on 2013-02-22 at 12:40:29.
 */
class ImageFileTest extends \PHPUnit_Framework_TestCase
{

    private $imageFile;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->config = phpUnitConfig::getConfig();
        $this->imageFile = LwLibrary\Filesystem\ImageFile::getInstance($this->config["path"]["web_resource"] . "test_lw_imagefile/", "test.jpg");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }


    /**
     * @todo Implement testGetInstance().
     */
    public function testGetInstance()
    {
        $imageFile = LwLibrary\Filesystem\ImageFile::getInstance($this->config["path"]["web_resource"] . "test_lw_imagefile/", "test.jpg");
        $this->assertTrue(is_object($imageFile));
    }

    /**
     * @todo Implement testGetType().
     */
    public function testGetType()
    {
        $this->assertEquals("image", $this->imageFile->getType());
    }

    /**
     * @todo Implement testSetMaxSizes().
     */
    public function testSetMaxSizes()
    {
        $this->imageFile->setMaxSizes(100, 100);
    }

    public function testgetMaxWidth()
    {
        $this->assertEquals(100, $this->imageFile->getMaxWidth());
    }

    public function testgetMaxHeight()
    {
        $this->assertEquals(100, $this->imageFile->getMaxHeight());
    }

    public function testResize()
    {
        $imageMock = $this->getMock("\\LwLibrary\\Image\\Image", array("scaleImage"));
        $imageMock->expects($this->any())
                ->method("scaleImage")
                ->will($this->returnValue(true));

        $factoryMock = $this->getMock("\\LwLibrary\\Image\\ImageFactory", array("createObject"));

        $factoryMock->expects($this->any())
                ->method("createObject")
                ->with($this->config["path"]["web_resource"] . "test_lw_imagefile/" . "test.jpg")
                ->will($this->returnValue($imageMock));

        $this->imageFile->setImageFactory($factoryMock);
        
        
        try {
            $this->imageFile->resize(101, 101, false, false);
        } catch (Exception $e) {
            $this->assertEquals($e->getMessage(), "Bildgroessen stimmen nicht");
        }
        
        try {
            $this->imageFile->resize("a", "b", false, false);
        } catch (Exception $e) {
            $this->assertEquals($e->getMessage(), "Bildgroessen stimmen nicht");
        }
  
        $this->assertTrue($this->imageFile->resize(90,90,false,false));
        $this->assertTrue($this->imageFile->resize(90,90,false,true));
    }
}