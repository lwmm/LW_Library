<?php

error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED);
require_once dirname(__FILE__) . '/../../Filter/Inputfilter.php';

/**
 * Test class for Inputfilter.
 * Generated by PHPUnit on 2013-02-26 at 11:30:46.
 */
class InputfilterTest extends \PHPUnit_Framework_TestCase
{

    protected $inputfilter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $source = array(
            "hallo" => 1,
            "test" => "2",
            "input" => "testinput alpha",
            "input_2" => "test mit input alpha 3874892379",
            "input_3" => "$)?%/)$%/§)$(=§(??$/?§)",
            "mail" => "test@logic-works.de",
            "mail_2" => "fbaifeaae@faefege"
        );
        $this->inputfilter = new LwLibrary\Filter\Inputfilter($source);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @todo Implement testKeyExists().
     */
    public function testKeyExists()
    {
        $this->assertTrue($this->inputfilter->keyExists("hallo"));
        $this->assertFalse($this->inputfilter->keyExists("nichtVorhanden"));
    }

    /**
     * @todo Implement testGetKeys().
     */
    public function testGetKeys()
    {
        $assertedArray = array("hallo", "test", "input", "input_2", "input_3", "mail", "mail_2");
        $this->assertEquals($assertedArray, $this->inputfilter->getKeys());
    }

    /**
     * @todo Implement testGetAlpha().
     */
    public function testGetAlpha()
    {
        $this->assertEquals("", $this->inputfilter->getAlpha("hallo"));
        $this->assertEquals("", $this->inputfilter->getAlpha("test"));
        $this->assertEquals("testinput alpha", $this->inputfilter->getAlpha("input"));
        $this->assertEquals("test mit input alpha ", $this->inputfilter->getAlpha("input_2"));
        $this->assertEquals("", $this->inputfilter->getAlpha("input_3"));
        $this->assertEquals("testlogicworksde", $this->inputfilter->getAlpha("mail"));
        $this->assertEquals("fbaifeaaefaefege", $this->inputfilter->getAlpha("mail_2"));
    }

    /**
     * @todo Implement testGetAlnum().
     */
    public function testGetAlnum()
    {
        $this->assertEquals("1", $this->inputfilter->getAlnum("hallo"));
        $this->assertEquals(2, $this->inputfilter->getAlnum("test"));
        $this->assertEquals("testinput alpha", $this->inputfilter->getAlnum("input"));
        $this->assertEquals("test mit input alpha 3874892379", $this->inputfilter->getAlnum("input_2"));
        $this->assertEquals("", $this->inputfilter->getAlnum("input_3"));
        $this->assertEquals("testlogicworksde", $this->inputfilter->getAlnum("mail"));
        $this->assertEquals("fbaifeaaefaefege", $this->inputfilter->getAlnum("mail_2"));
    }

    /**
     * @todo Implement testGetInt().
     */
    public function testGetInt()
    {
        $this->assertEquals(1, $this->inputfilter->getInt("hallo"));
        $this->assertEquals(2, $this->inputfilter->getInt("test"));
        $this->assertEquals(0, $this->inputfilter->getInt("input"));
        $this->assertEquals(0, $this->inputfilter->getInt("input_2"));
        $this->assertEquals(0, $this->inputfilter->getInt("input_3"));
        $this->assertEquals(0, $this->inputfilter->getInt("mail"));
        $this->assertEquals(0, $this->inputfilter->getInt("mail_2"));
    }

    /**
     * @todo Implement testGetRaw().
     */
    public function testGetRaw()
    {
        $this->assertEquals(1, $this->inputfilter->getRaw("hallo"));
        $this->assertEquals(2, $this->inputfilter->getRaw("test"));
        $this->assertEquals("testinput alpha", $this->inputfilter->getRaw("input"));
        $this->assertEquals("test mit input alpha 3874892379", $this->inputfilter->getRaw("input_2"));
        $this->assertEquals("$)?%/)$%/§)$(=§(??$/?§)", $this->inputfilter->getRaw("input_3"));
        $this->assertEquals("test@logic-works.de", $this->inputfilter->getRaw("mail"));
        $this->assertEquals("fbaifeaae@faefege", $this->inputfilter->getRaw("mail_2"));
    }

    /**
     * @todo Implement testTestRegex().
     */
    public function testTestRegex()
    {
        $this->assertTrue($this->inputfilter->testRegex("mail", "/[^a-zA-Z0-9\s]/"));
        $this->assertFalse($this->inputfilter->testRegex("gibtEsNich", "/[^a-zA-Z0-9\s]/"));
    }

    /**
     * @todo Implement testTestEmail().
     */
    public function testTestEmail()
    {
        $this->assertTrue($this->inputfilter->testEmail("mail"));
        $this->assertFalse($this->inputfilter->testEmail("mail_2"));
        $this->assertFalse($this->inputfilter->testEmail("input"));
        $this->assertFalse($this->inputfilter->testEmail("input_2"));
        $this->assertFalse($this->inputfilter->testEmail("input_3"));
        $this->assertFalse($this->inputfilter->testEmail("test"));
        $this->assertFalse($this->inputfilter->testEmail("hallo"));
    }

}